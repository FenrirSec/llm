#!/usr/bin/env python3

import chromadb
import json
import ollama
import subprocess

tools = []
scope = []
interest_points = []

methodology = None
with open("methodology.json") as f:
    methodology = json.load(f)

documents = []

for phase in methodology['PenTest']['Phases']:
    doc = f"{phase['Name']}: {phase['Description']} \nTools:\n"
    doc += "\n".join([f"{tool['Name']}: {tool['Description']}" for tool in phase.get('Tools', [])])
    for tool in phase.get('Tools', []):
        tools.append(tool['Name'])
    doc += ("Techniques : " + ", ".join(phase['Techniques']))
    documents.append(doc)

def exec_command(cmd):
    return subprocess.check_output(cmd, shell=True, text=True)

def ingest_documents(collection):
    for i, doc in enumerate(documents):
        response = ollama.embeddings(model="mxbai-embed-large", prompt=doc)
        embedding = response["embedding"]
        collection.add(
            ids=[str(i)],
            embeddings=[embedding],
            documents=[doc]
        )

def get_command(tool, target):
    commands = {
        "nikto": f"nikto.pl -h {target}",
        "nmap": f"nmap -sT -T5 {target}",
        "httpx": f"./tools/httpx -status-code -title -tech-detect -u {target}",
        "subfinder": f"./tools/subfinder -d {target}",
        "nuclei": f"./tools/nuclei -u {target}"
    }
    return commands.get(tool)
        
def main():
    global scope, interest_points
    
    specifications = input("Enter your audit specifications (type, scope, tests included/excluded etc...\n>>> ")
    client = chromadb.Client()
    collection = client.create_collection(name="PenTest")
    ingest_documents(collection)

    response = ollama.embeddings(model="mxbai-embed-large", prompt=specifications)
    results = collection.query(
	query_embeddings=[response["embedding"]],
	n_results=2
    )

    # Getting all of the corresponding documents in a single context string
    flat_documents = [item for sublist in results['documents'] for item in sublist]
    context = " ".join([doc.replace('\n', ' ').strip() for doc in flat_documents])
    context = ' '.join(context.split())

    tools_phi3 =  ollama.generate(
        model="phi3",
        prompt=f"Based on this :'{specifications}' using ONLY this information: '{context}', name the tools that should be used. DO NOT ANSWER WITH ANYTHING ELSE."
    )
    target_phi3 = ollama.generate(
        model="phi3",
        prompt=f"In this sentence : '{specifications}' which is the URL or network range of the audit target? ONLY ANSWER WITH THE URL OR IP ADDRESS OR NETWORK RANGE."
    )

    # Selecting the best tools    
    tools = tools_phi3['response'].strip().split(',')
    target = target_phi3['response'].strip().split(',')
    scope += target

    print('Scope: ', scope)
    print('Tools: ', tools)

    # Executing the commands for each tool
    for tool in tools:
        for item in scope:
            command = get_command(tool.strip(), item)
            try:
                output = exec_command(command)
            except Exception as e:
                continue
            output_llama3 = ollama.generate(
                model="phi3",
                prompt=f"Using this output from {tool}, during a penetration testing assessment, \
which are the interest points and what are the domains and IP addresses included in the audit scope? Answer ONLY WITH with : interest points ON THE FIRST LINE seperated by a | and IPs OR DOMAINS ON THE SECOND LINE SEPARATED BY A |. NOTHING ELSE! TOOL OUTPUT : {output}"
            )
            out = output_llama3['response'].split('\n')
            if len(out) > 1:
                interest_points += out[0].split('|')
                scope += out[1].split('|')
            else:
                scope += out[0].split('|')
            print(scope, interest_points)

    return 0

if __name__ == "__main__":
    exit(main())
